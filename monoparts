#!/usr/bin/perl

use v5.12;

use Inline C => <<'END';
void boxblur1(char *vp, char *wp, int n, int r)
{
	int i;
	double *v = (double *) vp;
	double *w = (double *) wp;
	int d = 2 * r + 1;
	double sum = v[0];
	for (i = 1; i < r + 1; i++)
		sum += 2 * v[i];
	w[0] = sum / d;
	for (i = r + 1; i < d; i++) {
		sum += v[i];
		sum -= v[d - i];
		w[i - r] = sum / d;
	}
	for (i = d; i < n; i++) {
		sum += v[i];
		sum -= v[i - d];
		w[i - r] = sum / d;
	}
	for (i = n; i < n + r; i++) {
		int j = n - (i - n) - 2;
		sum += v[j];
		sum -= v[i - d];
		w[i - r] = sum / d;
	}
}
END

sub smooth (+$) {
	my $a = shift;
	my $r = shift;
	my $v = pack "d*", @$a;
	my $w = 1 x length $v;
	boxblur1($v, $w, 1+$#$a, $r);
	boxblur1($w, $v, 1+$#$a, $r);
	boxblur1($v, $w, 1+$#$a, $r);
	unpack "d*", $w;
}

sub peaks (+) {
	my $a = shift;
	my $x0 = @$a[0];
	my $rising = 0;
	my @peaks;
	for (my $i = 1; $i < @$a; $i++) {
		my $x1 = $$a[$i];
		if ($x1 > $x0) {
			$rising = $i;
			$x0 = $x1;
		}
		elsif ($x1 < $x0) {
			push @peaks, [ $rising, $x0 ] if defined $rising;
			undef $rising;
			$x0 = $x1;
		}
	}
	push @peaks, [ $rising, $x0 ] if defined $rising;
	return @peaks;
}

sub sort_peaks (+) {
	my $v = shift;
	my @peaks = sort { $$b[1] <=> $$a[1] } @$v;
	my $prev;
	for (@peaks) {
		if (not defined $prev) {
			$prev = $$_[1];
			next;
		}
		$$_[2] = $prev - $$_[1];
		$prev = $$_[1];
	}
	return @peaks;
}

sub intersect (+$) {
	my $smooth = shift;
	my $thrv = shift;
	my $i = 0;
	my @parts;
	while (1) {
		$i++ while $i < @$smooth and $$smooth[$i] > $thrv;
		last if $i == @$smooth;
		my $j = $i + 1;
		$j++ while $j < @$smooth and $$smooth[$j] <= $thrv;
		push @parts, [$i, $j - 1];
		last if $j == @$smooth;
		$i = $j;
	}
	return @parts;
}

sub rolloff_attack ($+$) {
	my ($i, $smooths, $thrv) = @_;
	my $j = $i;
	for my $s (reverse @$smooths) {
		$i-- while $i > 0 and $$s[$i-1] < $$s[$i];
		$j++ while $j < $#$s and $$s[$j+1] < $thrv;
	}
	my $d = $$smooths[0];
	my $imin = $i;
	my $vmin = $$d[$i];
	for ($i++; $i <= $j; $i++) {
		($imin, $vmin) = ($i, $$d[$i])
			if $$d[$i] <= $vmin;
	}
	return $imin;
}

sub rolloff_release ($+$) {
	my ($i, $smooths, $thrv) = @_;
	my $j = $i;
	for my $s (reverse @$smooths) {
		$i++ while $i < $#$s and $$s[$i+1] < $$s[$i];
		$j-- while $j > 0 and $$s[$j-1] < $thrv;
	}
	my $d = $$smooths[0];
	my $imin = $i;
	my $vmin = $$d[$i];
	for ($i--; $i >= $j; $i--) {
		($imin, $vmin) = ($i, $$d[$i])
			if $$d[$i] <= $vmin;
	}
	return $imin;
}

sub rolloff (++$) {
	my ($parts, $smooths, $thrv) = @_;
	for my $part (@$parts) {
		$$part[0] = rolloff_release $$part[0], $smooths, $thrv;
		$$part[1] = rolloff_attack  $$part[1], $smooths, $thrv;
	}
}

sub argmax (&+) {
	my $block = shift;
	my $array = shift;
	my ($maxi, $maxo, $maxv);
	my $i = 0;
	for (@$array) {
		my $v = $block->();
		($maxi, $maxo, $maxv) = ($i, $_, $v)
			if not defined $maxi or $v > $maxv;
		$i++;
	}
	return wantarray ? ($maxi, $maxo, $maxv) : $maxi;
}

use Getopt::Long qw(GetOptions);
GetOptions "gain=f" => \my $gain
	or die "GetOptions failed";

sub lufs {
	my $db = shift;
	return -60 if $db != $db; # NaN
	$db = 0 + sprintf "%.2f", 18 + $gain + $db;
	return -60 if $db < -60;
	return 0 if $db > 0;
	return $db;
}

sub parse_ebur128_log {
	my @eb;
	local $_;
	while (<>) {
		next unless /(?:^|\r)\[Parsed_ebur128_(\d+) .* M: *(\S+) +S: *(\S+) /;
		push @{$eb[$1]{M}}, lufs $2;
		push @{$eb[$1]{S}}, lufs $3;
	}
	return @{$eb[-1]{S}};
}

my @data = parse_ebur128_log;

use List::Util qw(max min);
my $dmax = 0;
my $dmin = -60;

my $radius = 25;
my @smooths;
my @peaks;
my ($thri, $thrp, $thrv);
my @parts;
sub mkdata {
	$smooths[$radius] //= [smooth @data, $radius];
	@peaks = peaks $smooths[$radius];
	@peaks = sort_peaks @peaks;
	(undef, $thrp) = argmax { $$_[2] } @peaks;
	($thri, $thrv) = @$thrp[0,1];
	@parts = intersect $smooths[$radius], $thrv;
	$smooths[0] = \@data;
	$smooths[$_] //= [smooth @data, $_] for 1..$radius-1;
	my @ss = @smooths[0..$radius];
	rolloff @parts, @ss, $thrv;
}
mkdata();

use Gtk2 '-init';
use Glib qw(TRUE FALSE);

our %KS;
require Gtk2::Gdk::Keysyms;
*KS = \%Gtk2::Gdk::Keysyms;

sub key_press {
	my ($widget, $event) = @_;
	my $key = $event->keyval;
	if    ($key == $KS{Up}) {
		$radius++;
		mkdata();
		render();
	}
	elsif ($key == $KS{Down}) {
		$radius-- if $radius > 1;
		mkdata();
		render();
	}
	elsif ($key == $KS{Return} or $key == $KS{KP_Enter}) {
		say join "," => map { "$$_[0]-$$_[1]" } @parts;
		Gtk2->main_quit;
		exit 0;
	}
}

our $WW = int 0.5 + @data / 5;
use constant HH => 640;

sub i2cr ($) {
	0.5 + $_[0] / 5;
}

sub y2cr ($) {
	HH - ($_[0] - $dmin) / ($dmax - $dmin) * HH - 0.5;
}

sub draw_part ($$$+) {
	my ($cr, $i, $j, $color) = @_;
	$cr->set_source_rgb(@$color);
	$cr->move_to(i2cr $i, y2cr $data[$i]);
	for ($i++; $i <= $j; $i++) {
		$cr->line_to(i2cr $i, y2cr $data[$i]);
	}
	$cr->stroke;
}

our $surf;
sub create_image {
	$surf ||= Cairo::ImageSurface->create('argb32', $WW, HH);
	my $cr = Cairo::Context->create($surf);
	# clear
	$cr->set_line_width(1);
	$cr->set_source_rgb(1, 1, 1);
	$cr->set_operator('source');
	$cr->paint;
	# data bg
	$cr->set_source_rgb(0.8, 0.8, 0.8);
	$cr->move_to(0, HH);
	for my $i (0 .. $#data) {
		$cr->line_to(i2cr $i, y2cr $data[$i]);
	}
	$cr->line_to($WW, HH);
	$cr->fill;
	# threshold
	$cr->set_dash(1, 1, 1);
	$cr->set_source_rgb(0, 0.8, 0);
	$cr->move_to(  0, y2cr $thrv);
	$cr->line_to($WW, y2cr $thrv);
	$cr->stroke;
	$cr->set_dash(0);
	# smooth outline
	$cr->set_source_rgb(0, 0, 0.8);
	$cr->move_to(0, HH);
	for my $i (0 .. $#{$smooths[$radius]}) {
		$cr->line_to(i2cr $i, y2cr $smooths[$radius][$i]);
	}
	$cr->stroke;
	# parts
	my $cm = [0.8, 0, 0];
	my $cs = [0.1, 0.1, 0.1];
	for (my $i = 0; $i < @parts; $i++) {
		my $p = $parts[$i];
		draw_part $cr, 0, $$p[0], $cs
			if $i == 0 and $$p[0];
		draw_part $cr, $$p[0], $$p[1], $cm;
		last if $$p[1] == $#data;
		my $q = $parts[$i+1];
		my $qq = $q ? $$q[0] : $#data;
		draw_part $cr, $$p[1], $qq, $cs;
	}
	# the peak
	$cr->set_source_rgb(0, 0, 0.8);
	for ($thrp) {
		$cr->arc(i2cr $$_[0], y2cr $$_[1], 2, 0, 2 * 3.14);
		$cr->fill;
	}
	return $surf;
}

create_image();

sub expose {
	my ($widget, $event, $surf) = @_;
	my $cr = Gtk2::Gdk::Cairo::Context->create($widget->window);
	$cr->set_source_surface($surf, 0, 0);
	$cr->paint;
	return FALSE;
}

my $draw = Gtk2::DrawingArea->new;
$draw->size($WW, HH);
$draw->signal_connect('expose_event' => \&expose, $surf);

sub render {
	$surf = create_image();
	expose($draw, '', $surf);
}

my $win = Gtk2::Window->new;
$win->signal_connect('delete_event' => sub { Gtk2->main_quit });
$win->signal_connect('key-press-event' => \&key_press);
if ($WW <= 1200) {
	$win->add($draw);
}
else {
	my $scroll = Gtk2::ScrolledWindow->new;
	$scroll->add_with_viewport($draw);
	$scroll->set_policy('always', 'never');
	$draw->set_size_request(-1, HH);
	$scroll->set_size_request(1200, -1);
	$win->add($scroll);
}
$win->show_all;
Gtk2->main;
